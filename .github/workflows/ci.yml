name: CI

on:
  push:
    branches: [ master, v2.x ]
  pull_request:
    branches: [ master, v2.x ]
  schedule:
    # Run every Sunday at midnight
    - cron:  '0 0 * * 0'

defaults:
  run:
    shell: bash -l {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Latest supported versions
          - name: Linux (CUDA 12)
            cuda: "12.*"
            gcc: "14.*"
    steps:
    - name: Check out
      uses: actions/checkout@v4

    - name: Prepare dependencies
      run: |
        sed -i -e "/cuda-version/c\  - cuda-version ${{ matrix.cuda }}" \
               -e "/gxx_linux-64/c\  - gxx_linux-64 ${{ matrix.gcc }}" \
               environment.yml
    - name: Show dependency file
      run: cat environment.yml
      
    - name: Install Mamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment.yml
        cache-environment: false
        cache-downloads: true
      env:
        CONDA_OVERRIDE_CUDA: ${{ matrix.nvcc }}

    - name: List environment
      run: |
        micromamba activate uammd
        micromamba list

    - name: Configure and compile examples
      run: |
        micromamba activate uammd
        mkdir examples/build && cd examples/build
        cmake -DCMAKE_VERBOSE_MAKEFILE=yes -DCMAKE_CUDA_ARCHITECTURES=OFF ..
        make -j3
    - name: Configure and compile tests
      run: |
        micromamba activate uammd
        mkdir test/build && cd test/build
        cmake -DCMAKE_VERBOSE_MAKEFILE=yes -DCMAKE_CUDA_ARCHITECTURES=OFF ..
        make -j3

    - name: Check header installation
      run: |
        micromamba activate uammd
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DCMAKE_CUDA_ARCHITECTURES=OFF ..
        make install
        echo "#include<uammd.cuh>" > test.cu
        echo "int main(){return 0;}" >> test.cu
        nvcc -std=c++14 -I"${CONDA_PREFIX}/include/uammd" -I"${CONDA_PREFIX}/include/uammd/third_party" test.cu -o /tmp/test


